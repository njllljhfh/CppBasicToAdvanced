#include <cstdio>  // c中用 <stdio.h>
#include "001_命名空间-project3.h"


//ctrl + f5: 编译和运行程序。
// main()函数是整个程序的入口程序，系统是从该函数开始执行的。
// linux 平台可用 g++ 编译


//一：命名空间感念简介
// 命名空间就是为了防止名字冲突而引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名；
// 可以把命名空间看成一个作用域，我们在这个命名空间里定义函数，跟你另外一个命名空间里定义的函数即使同名，也互不影响。
/*
    命名空间定义：
    namespace 名称
    {
         代码
    }
*/


//张三
//同名实体：同名的函数，同名的变量，同名的类定义
namespace zhangsan //定义一个命名空间
{
    void radius()
    {
        printf("张三的radius()函数\n");
    }
}


// 使用某个命名空间
using namespace lisi;
using namespace zhangsan;


/*
    如果lisi命名空间没定义过，相当于新定义一个命名空间。
    如果lisi命名空间已经定义过，相当于打开已经存在的命名空间，并为其添加新的成员声明。
    命名空间的定义可以不连续，同一个命名空间可以写在多个文件里。

    外界访问命名空间中的成员的方式：
        命名空间名::实体名   --- 其中的'::'叫 “作用域运算符”
*/
//namespace lisi 
//{
//    void radius2()
//    {
//        printf("李四的radius2()函数\n");
//    }
//}


int main001()
{
    //C++从基础到进阶-视频-02

    printf("001_命名空间\n");
    //radius();// zhangsan也有radius函数，所以using 命名空间后，也不能直接调用
    lisi::radius(); 
    radius2(); // zhangsan命名空间没有此函数，所以using 命名空间后，可以直接调用

    // main()中返回值一般表示状态，返回0表示成功，非0一般表示有些错误，我们这里一般就先返回0。
    // 这种返回值 一般在windows下没啥用。以后如果我们在linux下搞编程，这种返回值还是有用处的。
    return 0;
}



//规律：
//1. 一个项目中包含多个.cpp（源文件）和多个.h（头文件)。
//2. .c, .cpp, .cc, .cxx源文件后缀，比如用于GNU的编译器。 .m, .mm
//  头文件 .h, .hpp(将头文件和源文件内容放在一起)


//可移植性（源代码可移植）：同一套源代码，在不同平台用不同的编译器进行编译